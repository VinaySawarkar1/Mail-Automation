I want to convert my existing Python Tkinter mass mailer application into a modern and interactive web application using React.js. I will provide the Python code for the mass mailer functionality separately. Due to the limitations of my Replit free account, I want to use JSON files to simulate a backend database for storing user data, email templates, and scheduled emails. The web application should have the following features and structure:

**Overall Theme and Design:**

* **Attractive and Interactive:** The theme should be visually appealing and encourage user interaction.
* **Dynamic Graphics and Relevant PNG Images:** Incorporate subtle animations, transitions, and relevant icons/images to enhance the user experience. Use PNG images where appropriate for better quality and transparency.
* **Color Palette:** Primarily use the following color codes:
    * Primary: #E55050
    * Secondary: #732255
    * Background Light: #E7F2E4
    * Text/Accent: #B2C6D5
* **Header (Consistent Across All Pages):** Include a navigation bar with links for "Home," "Mail Automation," and user authentication status (Login/Logout/Register).

**Page 1: Home Page**

* **Heading:** Prominently display "Mail Automation" with a relevant and engaging image/illustration related to email or automation.
* **Benefits of Mail Automation:** Create a section outlining the advantages of using mail automation (e.g., time-saving, increased efficiency, personalized communication, wider reach). Use icons and concise text for each benefit.
* **How to Use This Tool (Guidance):** Provide a clear and concise step-by-step guide (4-5 steps) on how to use the mail automation tool. Use numbered lists and descriptive text.
* **Footer (Consistent Across All Pages):** Display the following contact information:
    * Name: Vinay Sawarkar
    * Mobile Number: 8329925318
    * Email ID: vinaysawarkar19@gmail.com

**User Authentication System (Login, Logout, Register) - Using JSON File:**

* Implement a user registration, login, and logout system.
* **Registration:** When a user registers, their username, securely hashed password, and an initial approval status of "pending" should be saved as a new entry in a `users.json` file.
* **Login:** Upon login, the system should check if the provided username exists in `users.json` and verify the hashed password.
* **Logout:** Clear the user's session (if any).
* Upon successful registration, the user should be redirected to the "Waiting for Admin Approval" page.

**Page 2: Waiting for Admin Approval**

* Display a clear message to the user: "Your account is awaiting administrator approval. You will receive an email notification (this will be a simulated notification as we are using JSON for the backend) once your access has been granted."
* Include a link back to the "Home" page.

**Page 3: Mail Automation Tool - Functionality Details:**

* This page should replicate all the functionalities of my original Python Tkinter mass mailer application.
    * **Email and Password Input:** Users will enter their sending email address and password. These will be used for the SMTP connection.
    * **Excel File Selection:** A file input will allow users to select their Excel or CSV file containing the recipient list.
    * **Sheet Name Input:** A text input for the name of the sheet in the Excel file to be processed.
    * **Email Column Name Input:** A text input specifying the column header in the Excel file that contains the recipient email addresses.
    * **Subject Input:** A text input for the subject line of the email.
    * **CC and BCC Input (Single):** Text inputs for optional CC and BCC addresses.
    * **Multiple BCC/CC:** A number input to specify how many recipients to include in each email's BCC or CC field, and a dropdown to choose between "BCC" and "CC".
    * **Font Family Selection:** A dropdown list allowing users to choose the font for the email body.
    * **Email Body (Part 1):** A textarea for the first part of the email content.
    * **Image Selection:** A file input to select an image to be embedded in the email.
    * **Email Body (Part 3/Footer):** A textarea for the final part of the email content, including the footer.
    * **Attachment Selection:** A file input that allows users to select multiple files to attach. A display area should show the selected file names, and a "Clear Attachments" button should be available.
    * **"Import Emails" Button:** When clicked, this will read the selected Excel/CSV file (client-side using libraries like `xlsx` or `csv-parser`), extract email addresses from the specified column, validate them, and display the counts of valid and invalid emails. The list of valid emails should be stored in the component's state.
    * **Email Count Display:** Display the number of valid and invalid emails found after import.
    * **"Send Emails Now" Button:** When clicked, this will iterate through the stored valid email list (considering the multiple BCC/CC settings) and simulate sending emails using the provided sender credentials and email content. A "Console" area should update with simulated sending status and any simulated errors.
    * **Console:** A textarea to display messages related to email import and the simulated sending process.
    * **Save Template:** A button that, when clicked, saves the current subject, body parts, font, CC, BCC, and attachment list (names only) associated with the logged-in user in a `templates.json` file (each user's templates should be identifiable, perhaps using their username as a key).
    * **Load Template:** A dropdown/list populated with the saved templates for the logged-in user. Selecting a template will populate the corresponding input fields.
    * **Schedule Email:** Input fields for a future date (YYYY-MM-DD) and time (HH:MM). A "Schedule" button will save the current email details, the logged-in user, and the scheduled time in a `scheduled_emails.json` file.

**Page 4: Admin Page (Accessible Only to Admin Users) - Using JSON File:**

* This page should be accessible only if the logged-in user is identified as an admin (e.g., by checking their username in the `users.json` file).
* Display a table or list of all users from the `users.json` file, showing their username, email, and approval status.
* Provide buttons (e.g., "Approve," "Reject") next to each user to update their approval status in the `users.json` file.

**Backend Simulation (Using JSON Files):**

* **`users.json`:** Store user registration details (username, hashed password, approval status).
* **`templates.json`:** Store email templates. Each user's templates should be organized under their username (e.g., `{ "username1": { "template1": {...}, "template2": {...} }, "username2": {...} }`). Store attachment file *names* only, as actual file storage is complex with this approach.
* **`scheduled_emails.json`:** Store scheduled emails. Each entry should include the user who scheduled it, all the email details (subject, body, etc.), the scheduled date and time, and a status (e.g., "pending," "sent," "failed").

**Functionality Details for Each Feature:**

* **Registration:** When the user submits the registration form, client-side validation should occur. If valid, a request will be sent to a Replit backend function (using Fetch API) to add the user data to `users.json`. The backend function will read the file, append the new user (with "pending" status and hashed password), and write it back.
* **Login:** The login form submission will send credentials to a Replit backend function. This function will read `users.json`, find the user by username, compare the hashed password, and if successful, set a session (you'll need to explore Replit's session management or a simple token-based approach for this simulation).
* **Logout:** A client-side action that clears the user's session/token.
* **Admin Approval:** The Admin page will fetch user data from `users.json`. When the admin clicks "Approve" or "Reject" for a user, a request will be sent to a Replit backend function to update the `approval_status` for that user in `users.json`.
* **Template Saving:** When a user saves a template, the relevant data will be sent to a Replit backend function. This function will read `templates.json`, add or update the template under the logged-in user's key, and write the file back.
* **Template Loading:** The "Mail Automation" page will fetch the logged-in user's templates from `templates.json` and populate the dropdown. Selecting a template will update the form fields.
* **Email Scheduling:** When a user schedules an email, the details and the scheduled time will be sent to a Replit backend function. This function will add this data to `scheduled_emails.json` along with the user's identifier and a "pending" status.
* **Simulated Email Sending:** The "Send Emails Now" button will trigger a client-side simulation of sending. It won't actually send emails due to the limitations. The "Console" will display messages as if emails were being sent.
* **Scheduled Email Processing (Simulation):** To simulate scheduled sending, you could potentially have a client-side function that runs periodically (while the user is on the "Mail Automation" page) and checks `scheduled_emails.json` (fetched from the backend) for pending emails whose scheduled time has passed. It would then update the "Console" with a simulated send. A more realistic (though still simulated) approach on Replit Free might involve a simple backend function triggered manually or via a very basic Replit deployment that checks and updates the status in `scheduled_emails.json`. Actual background processing for real email sending isn't feasible on the free tier.

**Additional Design Suggestions (Feel Free to Enhance):**

* Consider using React components from popular UI libraries (like Material UI, Chakra UI, or Tailwind CSS) for consistent styling and pre-built interactive elements.
* Implement progress indicators during file processing.
* Provide clear visual feedback for successful actions and errors.
* Ensure the layout is responsive and works well on different screen sizes.
* Use clear and concise labels for all input fields and buttons.

**Please generate the basic structure and code snippets for this React.js web application within the Replit environment, keeping in mind the described functionalities, design guidelines, and the use of JSON files for backend simulation. I will provide the core email sending logic from my Python application for you to understand the input requirements of that process.**